'''
Voc√™ conhece o jogo do NIM? Nesse jogo, n pe√ßas s√£o inicialmente dispostas numa mesa ou tabuleiro. Dois jogadores jogam  alternadamente, retirando pelo menos 1 e no m√°ximo m pe√ßas cada um. Quem tirar as √∫ltimas pe√ßas poss√≠veis ganha o jogo.
Existe uma estrat√©gia para ganhar o jogo que √© muito simples: ela consiste em deixar sempre m√∫ltiplos de (m+1) pe√ßas ao jogador oponente.
Objetivo
Voc√™ dever√° escrever um programa na linguagem Python, vers√£o 3, que permita a uma "v√≠tima" jogar o NIM contra o computador. O computador, √© claro, dever√° seguir a estrat√©gia vencedora descrita acima.
Sejam n o n√∫mero de pe√ßas inicial e m o n√∫mero m√°ximo de pe√ßas que √© poss√≠vel retirar em uma rodada. Para garantir que o computador ganhe sempre, √© preciso considerar os dois cen√°rios poss√≠veis para o in√≠cio do jogo:
Se n √© m√∫ltiplo de (m+1), o computador deve ser "generoso" e convidar o jogador a iniciar a partida com a frase "Voc√™ come√ßa!"
Caso contr√°rio, o computador toma a inciativa de come√ßar o jogo, declarando "Computador come√ßa!"
Uma vez iniciado o jogo, a estrat√©gia do computador para ganhar consiste em deixar sempre um n√∫mero de pe√ßas que seja m√∫ltiplo de (m+1) ao jogador. Caso isso n√£o seja poss√≠vel, dever√° tirar o n√∫mero m√°ximo de pe√ßas poss√≠veis.
Seu trabalho, ent√£o, ser√° implementar o Jogo e fazer com que o computador se utilize da estrat√©gia vencedora.
Seu Programa
Com o objetivo do EP j√° definido, uma d√∫vida que deve surgir nesse momento √© como modelar o jogo de forma que possa ser implementado em Python 3 correspondendo rigorosamente √†s especifica√ß√µes descritas at√© agora.
Para facilitar seu trabalho e permitir a corre√ß√£o autom√°tica do exerc√≠cio, apresentamos a seguir um modelo, isto √©, uma descri√ß√£o em linhas gerais de um conjunto de fun√ß√µes que resolve o problema proposto neste EP. Embora sejam poss√≠veis outras abordagens, √© preciso atender exatamente o que est√° definido abaixo para que a corre√ß√£o autom√°tica do trabalho funcione corretamente.
O programa deve implementar:
Uma fun√ß√£o computador_escolhe_jogada que recebe, como par√¢metros, os n√∫meros n e m descritos acima e devolve um inteiro correspondente √† pr√≥xima jogada do computador (ou seja, quantas pe√ßas o computador deve retirar do tabuleiro) de acordo com a estrat√©gia vencedora.
Uma fun√ß√£o usu√°rio_escolhe_jogada que recebe os mesmos par√¢metros, solicita que o jogador informe sua jogada e verifica se o valor informado √© v√°lido. Se o valor informado for v√°lido, a fun√ß√£o deve devolv√™-lo; caso contr√°rio, deve solicitar novamente ao usu√°rio que informe uma jogada v√°lida.
Uma fun√ß√£o partida que n√£o recebe nenhum par√¢metro, solicita ao usu√°rio que informe os valores de n e m e inicia o jogo, alternando entre jogadas do computador e do usu√°rio (ou seja, chamadas √†s duas fun√ß√µes anteriores). A escolha da jogada inicial deve ser feita em fun√ß√£o da estrat√©gia vencedora, como dito anteriormente. A cada jogada, deve ser impresso na tela o estado atual do jogo, ou seja, quantas pe√ßas foram removidas na √∫ltima jogada e quantas restam na mesa. Quando a √∫ltima pe√ßa √© removida, essa fun√ß√£o imprime na tela a mensagem "O computador ganhou!" ou "Voc√™ ganhou!" conforme o caso.
Observe que, para isso funcionar, seu programa deve sempre "lembrar" qual √© o n√∫mero de pe√ßas atualmente no tabuleiro e qual √© o m√°ximo de pe√ßas a retirar em cada jogada.
Cuidado: o corretor autom√°tico n√£o funciona bem se voc√™ tiver alguma chamada a input() antes da defini√ß√£o de todas as fun√ß√µes do jogo (a menos que essa chamada esteja dentro de uma fun√ß√£o). Se seu programa usar input() sem que ele esteja dentro de alguma fun√ß√£o, coloque-o no final do programa.
Campeonatos
Como todos sabemos, uma √∫nica rodada de um jogo n√£o √© suficiente para definir quem √© o melhor jogador. Assim, uma vez que a fun√ß√£o partida esteja funcionando, voc√™ dever√° criar uma outra fun√ß√£o chamada campeonato. Essa nova fun√ß√£o deve realizar tr√™s partidas seguidas do jogo e, ao final, mostrar o placar dessas tr√™s partidas e indicar o vencedor do campeonato. O placar deve ser impresso na forma
Placar: Voc√™ ??? X ??? Computador
Execu√ß√£o
Dado que √© poss√≠vel jogar partidas individuais ou campeonatos, seu programa deve come√ßar solicitando ao usu√°rio que escolha se prefere jogar apenas uma partida (op√ß√£o 1) ou um campeonato (op√ß√£o 2).
Aten√ß√£o: o corretor autom√°tico vai verificar se voc√™ est√° utilizando exatamente as mensagens pedidas, como "Voc√™ come√ßa!", "O computador ganhou!" etc. Deixe para usar a sua criatividade em outros lugares!
'''

import sys, random
#Definindo fun√ß√µes:

# p = pe√ßas totais | mr = maior_retirada

#Calcula qual ser√° a quantidade de pe√ßas que o computador jogar√° de acordo com o enunciado:
def computador_escolhe_jogada(p, mr):
    resposta = random.randint(1, mr)
    return resposta

#Recebe a quantidade de pe√ßas se1lecionadas pelo jogador:
def usuario_escolhe_jogada(p, mr):
    valor = int(input('\n\t[ ? ] Quantas pe√ßas voc√™ vai tirar\n=> '))

    #Mensagem de erro para valores n√£o aceitos:
    while valor <= 0 or valor > mr or valor > p:
        print('\n\t[ ‚ö† ] Oops! Jogada inv√°lida! Tente de novo.')
        valor = int(input('\t[ ? ] Quantas pe√ßas voc√™ vai tirar\n=> '))

    #Caso esteja tudo certo, a fun√ß√£o devolve o valor determinado pelo usu√°rio:
    return valor

#Fun√ß√£o para controlar o jogo:
def partida():
    autentica√ßao = True
    while autentica√ßao:
        #Recebendo informa√ß√µes do usu√°rio:
        p = int(input('\n\t[ ? ] Quantidade de pe√ßas\n=> '))
        mr = int(input('\n\t[ ? ] Limite de pe√ßas por jogada\n=> '))
        if (p == 0) or (mr == 0):
            print('\n\t[ ‚ö† ] Informa√ß√µes √≠nvalidas! Tente novamente.')
        else:
            autentica√ßao = False

    #Conferindo se as informa√ß√µes s√£o v√°lidas:
    while mr < 1:
        print('\n\t[ ‚ö† ] A quantidade de pe√ßas por jogadas devem ser menor ou igual as pe√ßas totais.')
        mr = int(input('\n\t[ ? ] Limite de pe√ßas por jogada\n=> '))
        
    #Calculando quem come√ßar√° primeiro:
    quem_inicia = random.randint(1, 2)
    if quem_inicia == 1:
        print('\t[ üòé ] Voc√™ come√ßa!')

        # 1 = vez do usu√°rio, 2 = vez do computador
        jogada = 1

        #Conferindo se ainda existe pe√ßas:
        while p > 0:

            if jogada == 1 :
                result = usuario_escolhe_jogada(p, mr)
                print('\n\t[ ! ] Voc√™ tirou', result, 'pe√ßa(s).')

                #Retirando a quantidade escolhida pelo usu√°rio do todo:
                p = p - result
                print('\t[ ! ] Agora restam', p, 'pe√ßas no tabuleiro.')

                #Alternando para iniciar a vez do computador
                jogada = 2

            else:
                result = computador_escolhe_jogada(p, mr)
                print('\n\t[ ! ] O computador tirou', result, 'pe√ßa(s)')

                #Retirando a quantidade escolhida pelo computador do todo:
                p = p - result
                print('\t[ ! ] Agora restam', p, 'pe√ßas no tabuleiro.')

                #Alternando para iniciar a vez do usu√°rio:
                jogada = 1

        #Confere quem jogou por √∫ltimo e ganhou a partida:
        if jogada == 1:
            print('\n\t[ üíª ] Fim do jogo! O computador ganhou!\n')

            #Ponto do computador (Usado no campeonato):
            return 2 

        else:
            print('\n\t[ üòé ] Fim do jogo! O voc√™ ganhou!\n')

            #Ponto do jogador (Usado no campeonato):
            return 1 

    else:
        print('\n\t[ ‚öô ] Computador come√ßa!')

        # 1 = vez do usu√°rio, 2 = vez do computador
        jogada = 2

        #Conferindo se ainda existe pe√ßas:
        while p > 0:

            if jogada == 2:
                result = computador_escolhe_jogada(p, mr)
                print('\n\t[ ! ] O computador tirou', result, 'pe√ßa(s).')

                #Retirando a quantidade escolhida pelo computador do todo:
                p = p - result
                print('\t[ ! ] Agora restam', p, 'pe√ßas no tabuleiro.')

                #Alternando para iniciar a vez do usu√°rio:
                jogada = 1

            else:
                result = usuario_escolhe_jogada(p, mr)
                print('\n\t[ ! ] Voc√™ tirou', result, 'pe√ßa(s).')

                #Retirando a quantidade escolhida pelo usu√°rio do todo:
                p = p - result
                print('\t[ ! ] Agora restam', p, 'pe√ßas no tabuleiro.\n')

                #Alternando para iniciar a vez do computador:
                jogada = 2

        if jogada == 1:
            print('\n\t[ üíª ] Fim do jogo! O computador ganhou!')

            #Ponto do computador (Usado no campeonato):
            return 2

        else:
            print('\n\t[ üòé ]Fim do jogo! O voc√™ ganhou!')

            #Ponto do jogador (Usado no campeonato):
            return 1 

def campeonato():
    #Contador de partidas:
    partidas = 1

    #Pontos do computador e do usu√°rio:
    pts_pc = pts_user = 0

    #Limitador para acontecerem apenas 3 partidas:
    while partidas < 4:
        print('\n\t[ ‚åõ ] Rodada', partidas)

        #Caso o valor da partida retorne 1, significa que o usu√°rio ganhou:
        if partida() == 1:
            pts_user = pts_user + 1

        #Caso contr√°rio, significa que o computador venceu:
        else:
            pts_pc = pts_pc + 1

        #Contador aumenta em 1 a cada partida:
        partidas = partidas + 1

    #Resultados:
    print('\t[ ü•á ] Final do campeonato!')
    print('\t[ ü•á ] Placar: Voc√™', pts_user, 'X', pts_pc, 'Computador')

#Fun√ß√£o para mostrar mensagem no final:
def fim() :

    #Loop at√© ser receber uma resposta valida:
    while True:
        print('\n\tDeseja iniciar outra partida?\n\t[ 1 ] Sim.\n\t[ 2 ] N√£o.\n')
        resposta = int(input('=> '))

        #Se sim, o jogo ser√° iniciado novamente:
        if resposta == 1:
            jogo_completo()

        #Se n√£o, o jogo ser√° fechado:
        elif resposta == 2:
            sys.exit()

        #Mensagem para resposta √≠nvalida:
        else:
            print('[ ‚ö† ] Resposta √≠nvalida!')

#Fun√ß√£o principal:
def jogo_completo() :

    #Loop at√© receber uma mensagem valida:
    while True :
        print('\n\tBem-vindo ao jogo do NIM! Escolha:\n')
        print('\t[ 1 ] Para jogar uma partida isolada.\n\t[ 2 ] Para jogar um campeonato.')
        resposta = int(input('=> '))

        if resposta == 1 :
            partida()
            fim()

        elif resposta == 2 :
            campeonato()
            fim()

        else:
            print('\n\t[ ‚ö† ] Resposta √≠nvalida! Tente novamente.')

#Iniciando jogo:
jogo_completo()
